from aiogram import Bot, Dispatcher, types
from aiogram import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import config

bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)

# –°–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤
tours_list = ["–¢—É—Äsdffsfdfsdfsf 1", "–¢—É—Ädfsffdfdfsf 2", "–¢—É—Äsdfsdfdfsdfsdff 3"]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = KeyboardButton("üìã –¢—É—Ä")
    item2 = KeyboardButton("üë• –ö–æ–º–∞–Ω–¥—ã")
    markup.row(item1, item2)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@dp.message_handler(lambda message: message.text == "üìã –¢—É—Ä")
async def send_tours(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    inline_markup = InlineKeyboardMarkup(row_width=4)

    for tour in tours_list:
        inline_markup.add(
            InlineKeyboardButton( "üìã" + tour, callback_data=f"show_tour_{tour}"),
        )
        inline_markup.add(
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_tour_{tour}"),
            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_tour_{tour}"),
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å"
    inline_markup.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="add_tour"))

    await message.answer("–°–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤:", reply_markup=inline_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.callback_query_handler(lambda query: query.data.startswith(('show_tour_', 'edit_tour_', 'delete_tour_')))
async def handle_tour_buttons(callback_query: types.CallbackQuery):
    action, tour = callback_query.data.split('_')[0], callback_query.data.split('_')[2]

    if action == 'show':
        await bot.send_message(callback_query.from_user.id, f"–í—ã–±—Ä–∞–Ω —Ç—É—Ä: {tour}")
    elif action == 'edit':
        await bot.send_message(callback_query.from_user.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—É—Ä–∞: {tour}")
    elif action == 'delete':
        await bot.send_message(callback_query.from_user.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–∞: {tour}")
    elif action == 'back':
        await send_welcome(callback_query.message)

    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å"
@dp.callback_query_handler(lambda query: query.data == 'add_tour')
async def add_tour(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–∞")

    # –í–∞—à –∫–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–∞

    await bot.answer_callback_query(callback_query.id)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
executor.start_polling(dp, skip_updates=True)
